# coding: utf-8

"""
    SmartAPI API

    This is the API provided from [SmartAPI](http://smart-api.info) application.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: cwu@scripps.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MetadataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def metadata_api_id_get(self, api_id, **kwargs):  # noqa: E501
        """Return matching API metadata  # noqa: E501

        Return matching API metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.metadata_api_id_get(api_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_id: (required)
        :param str meta: include \"_meta\" and \"_id\" fields in the response if passed \"1\" or \"true\". Default is \"false\".
        :param str raw: return raw metadata document if passed \"1\" or \"true\". Default is \"false\".
        :param str fields: You can use this parameter to filter the fields returned from the raw metadata document. Only effective when \"raw=1\" is passed. E.g. \"info.contact.name,servers\". Nested fields are supported via dot notation, and multiple fields can be passed as a comma-separated string.
        :param str _from: Number of items to be skipped. Combining with \"size\" parameter, this can be used for the pagination of the long result.
        :param str size: The number of items returned in one request. Combining with \"from\" parameter, this can be used for the pagination of the long result.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.metadata_api_id_get_with_http_info(api_id, **kwargs)  # noqa: E501
        else:
            (data) = self.metadata_api_id_get_with_http_info(api_id, **kwargs)  # noqa: E501
            return data

    def metadata_api_id_get_with_http_info(self, api_id, **kwargs):  # noqa: E501
        """Return matching API metadata  # noqa: E501

        Return matching API metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.metadata_api_id_get_with_http_info(api_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_id: (required)
        :param str meta: include \"_meta\" and \"_id\" fields in the response if passed \"1\" or \"true\". Default is \"false\".
        :param str raw: return raw metadata document if passed \"1\" or \"true\". Default is \"false\".
        :param str fields: You can use this parameter to filter the fields returned from the raw metadata document. Only effective when \"raw=1\" is passed. E.g. \"info.contact.name,servers\". Nested fields are supported via dot notation, and multiple fields can be passed as a comma-separated string.
        :param str _from: Number of items to be skipped. Combining with \"size\" parameter, this can be used for the pagination of the long result.
        :param str size: The number of items returned in one request. Combining with \"from\" parameter, this can be used for the pagination of the long result.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'meta', 'raw', 'fields', '_from', 'size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metadata_api_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params or
                params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `metadata_api_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['api_id'] = params['api_id']  # noqa: E501

        query_params = []
        if 'meta' in params:
            query_params.append(('meta', params['meta']))  # noqa: E501
        if 'raw' in params:
            query_params.append(('raw', params['raw']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/metadata/{api_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
