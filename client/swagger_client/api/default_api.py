# coding: utf-8

"""
    SmartAPI API

    This is the API provided from [SmartAPI](http://smart-api.info) application.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: cwu@scripps.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def query_get(self, q, **kwargs):  # noqa: E501
        """Query metadata for matching APIs.  # noqa: E501

        Query metadata for matching APIs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_get(q, async=True)
        >>> result = thread.get()

        :param async bool
        :param str q: Can pass any string as the query term to match any field, e.g. \"mygene.info\", or pass a fielded query term like \"info.contact.name:wu\". (required)
        :param str fields: You can use this parameter to filter the fields returned from the raw metadata document. Only effective when \"raw=1\" is passed. E.g. \"info.contact.name,servers\". Nested fields are supported via dot notation, and multiple fields can be passed as a comma-separated string.
        :param str raw: return raw metadata document if passed \"1\" or \"true\". Default is \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.query_get_with_http_info(q, **kwargs)  # noqa: E501
        else:
            (data) = self.query_get_with_http_info(q, **kwargs)  # noqa: E501
            return data

    def query_get_with_http_info(self, q, **kwargs):  # noqa: E501
        """Query metadata for matching APIs.  # noqa: E501

        Query metadata for matching APIs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.query_get_with_http_info(q, async=True)
        >>> result = thread.get()

        :param async bool
        :param str q: Can pass any string as the query term to match any field, e.g. \"mygene.info\", or pass a fielded query term like \"info.contact.name:wu\". (required)
        :param str fields: You can use this parameter to filter the fields returned from the raw metadata document. Only effective when \"raw=1\" is passed. E.g. \"info.contact.name,servers\". Nested fields are supported via dot notation, and multiple fields can be passed as a comma-separated string.
        :param str raw: return raw metadata document if passed \"1\" or \"true\". Default is \"false\".
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'fields', 'raw']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `query_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'raw' in params:
            query_params.append(('raw', params['raw']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/query/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suggestion_get(self, **kwargs):  # noqa: E501
        """Return suggested values for a give field.  # noqa: E501

        Return suggested values from the existing APIs in the registry for a given field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.suggestion_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str field: An input field to return the suggested values and their occurrence numbers.
        :param str size: The maximum number of suggested values to return
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.suggestion_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.suggestion_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def suggestion_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return suggested values for a give field.  # noqa: E501

        Return suggested values from the existing APIs in the registry for a given field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.suggestion_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str field: An input field to return the suggested values and their occurrence numbers.
        :param str size: The maximum number of suggested values to return
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'size']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suggestion_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/suggestion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_get(self, url, **kwargs):  # noqa: E501
        """Validate input SmartAPI metadata  # noqa: E501

        Validate input SmartAPI metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validate_get(url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str url: The full URL of an input SmartAPI metadata to validate. The file format can be either JSON or YAML. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.validate_get_with_http_info(url, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_get_with_http_info(url, **kwargs)  # noqa: E501
            return data

    def validate_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """Validate input SmartAPI metadata  # noqa: E501

        Validate input SmartAPI metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validate_get_with_http_info(url, async=True)
        >>> result = thread.get()

        :param async bool
        :param str url: The full URL of an input SmartAPI metadata to validate. The file format can be either JSON or YAML. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `validate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/validate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
